{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifCollectionItem.js","components/GifCollection.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","fetch","encodeURI","httpRequest","gifs","ok","json","data","map","img","id","title","url","images","downsized_medium","GifCollectionItem","className","src","alt","GifCollection","loading","state","setState","useEffect","then","imageResponse","useFetchGifs","image","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAMC,iBAEHJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAA+BO,OAC7CN,EAAc,MAMlB,SACI,uBACIO,KAAO,OACPC,MAAST,EACTU,SAnBc,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACxBV,EAAcU,EAAOF,a,+BCPhBG,EAAO,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,4DAEJ,mCACM,GAHF,SAIOC,MAAM,0CAAD,OAA2CC,UAAUH,GAArD,kBADV,GACU,oBAFhB,qCAFI,UAIbI,EAJa,OAKfC,EAAO,IAERD,EAAYE,GAPI,iCAQMF,EAAYG,OARlB,gBAQRC,EARQ,EAQRA,KACPH,EAAOG,EAAKC,KAAI,SAACC,GACb,MAAM,CACFC,GAAKD,EAAIC,GACTC,MAAQF,EAAIE,MACZC,IAAMH,EAAII,OAAOC,iBAAiBF,QAb3B,iCAkBZR,GAlBY,4CAAH,sDCCPW,EAAoB,SAAC,GAAkB,IAAjBJ,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEtC,OACI,sBAAKI,UAAY,yCAAjB,UACI,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,4BAAIA,QCFHQ,EAAgB,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAE3B,ECJwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BsB,KAAO,GACPa,SAAU,IAFd,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,WAGNzB,EAAQC,GACHyB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAOkB,EACPL,SAAU,SAGxB,CAACrB,IAGIsB,EDhByBK,CAAa3B,GAA/Bc,EAAd,EAAON,KAAca,EAArB,EAAqBA,QAErB,OACI,qCACI,6BAAKrB,IACJqB,GAAW,4CACZ,qBAAKJ,UAAU,YAAf,SAEQH,EAAOL,KAAI,SAACmB,GAAD,OACP,cAAC,EAAD,eAEQA,GADGA,EAAMjB,aEW1BkB,EAxBM,WAEjB,MAAoC3C,mBAAS,IAA7C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACwB,IAAtBS,EAAWD,QAAiB,mEAC9B,6BAEQC,EAAWe,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CACIA,SAAYA,GACLA,Y,MCbnC8B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2136f9ec.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ({target}) => {\r\n        setInputValue(target.value);\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();//Para evitar el comportamiento del submit\r\n        \r\n        if(inputValue.trim().length > 2){    \r\n            setCategories((categories) => [inputValue,...categories]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <input\r\n                type = \"text\"\r\n                value = {inputValue}\r\n                onChange = {handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifs = async(category) => {\r\n\r\n    const apiKey = 'JPW0tI3z43MgYJrGItISaoLhQqWCRbv0';\r\n    const numberOfGifs = 10;\r\n    const httpRequest = await fetch(`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${numberOfGifs}&api_key=${apiKey}`);\r\n    let gifs = [];\r\n\r\n    if(httpRequest.ok){\r\n        const {data} = await httpRequest.json();\r\n        gifs = data.map((img) =>{\r\n            return{\r\n                id : img.id,\r\n                title : img.title,\r\n                url : img.images.downsized_medium.url\r\n            }\r\n        });\r\n    }\r\n\r\n    return gifs;\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifCollectionItem = ({title, url}) => {\r\n\r\n    return (\r\n        <div className = \"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifCollectionItem } from './GifCollectionItem';\r\n\r\nexport const GifCollection = ({category}) => {\r\n\r\n    const {data : images,loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p>Cargando...</p>}\r\n            <div className=\"card-grid\"> \r\n                {\r\n                    images.map((image) => ( \r\n                        <GifCollectionItem \r\n                            key = {image.id}\r\n                            {...image}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nGifCollection.propTypes = {\r\n    category : PropTypes.string.isRequired\r\n}\r\n","import {useState,useEffect} from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data : [],\r\n        loading : true\r\n    });\r\n\r\n    useEffect(() => {\r\n        //Se ejecuta la primera vez que se renderiza y retornamos las imagenes\r\n        //Hasta que se haya completado la petición\r\n        getGifs(category)\r\n            .then(imageResponse => {\r\n                setState({\r\n                    data : imageResponse,\r\n                    loading : false\r\n                })\r\n            })\r\n    },[category]); \r\n\r\n\r\n    return state;\r\n}","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifCollection } from './components/GifCollection';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n    \r\n    return (\r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories = {setCategories}/>\r\n            <hr/>\r\n            {(categories.length === 0) && <p>No cuenta con búsquedas pasadas</p>}\r\n            <ol>\r\n                {\r\n                    categories.map((category) => (\r\n                        <GifCollection \r\n                            category = {category}\r\n                            key = {category}\r\n                        />\r\n                    ))\r\n                } \r\n            </ol>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}